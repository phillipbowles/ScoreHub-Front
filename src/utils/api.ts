import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import { getApiUrl } from '../config/api-config';

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  name: string;
  username: string;
  email_address: string;
  password: string;
  password_confirmation: string;
}

// Respuesta de login del backend
export interface LoginResponse {
  data: {
    access_token: string;
    token_type: string;
    expires_in: number;
  };
}

// Respuesta de registro del backend (UserResource)
export interface RegisterResponse {
  data: {
    id: number;
    name: string;
    email_address: string;
  };
}

class ApiService {
  private baseURL: string;
  private timeout: number;

  constructor() {
    // Automatically detect API URL from generated config
    // Config is generated by running: ./detect-ip.sh
    this.baseURL = getApiUrl();
    this.timeout = 10000;

    console.log('üîß API Configuration:', {
      baseURL: this.baseURL,
      timeout: this.timeout,
      platform: Platform.OS,
      isDev: __DEV__
    });
  }

  private async getAuthToken(): Promise<string | null> {
    try {
      return await AsyncStorage.getItem('userToken');
    } catch (error) {
      return null;
    }
  }

  private async makeRequest<T>(
    endpoint: string,
    options: RequestInit = {},
    skipAuth: boolean = false
  ): Promise<ApiResponse<T>> {
    const fullURL = `${this.baseURL}${endpoint}`;
    const method = options.method || 'GET';

    console.log(`üåê ${method} ${endpoint}`);

    try {
      const token = skipAuth ? null : await this.getAuthToken();

      if (!skipAuth && token) {
        console.log(`üîë Token: ${token.substring(0, 20)}...`);
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const requestOptions = {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          ...(token && !skipAuth && { Authorization: `Bearer ${token}` }),
          ...options.headers,
        },
        signal: controller.signal,
      };

      const response = await fetch(fullURL, requestOptions);
      clearTimeout(timeoutId);

      let data;
      try {
        const responseText = await response.text();
        data = JSON.parse(responseText);
      } catch (parseError) {
        data = {};
      }

      if (!response.ok) {
        console.log(`‚ùå ${method} ${endpoint} - Status ${response.status}`);
        return {
          success: false,
          error: data.message || data.error || `HTTP error! status: ${response.status}`,
        };
      }

      console.log(`‚úÖ ${method} ${endpoint} - Success`);
      return {
        success: true,
        data,
      };
    } catch (error) {
      console.error(`üí• ${method} ${endpoint} - ${error instanceof Error ? error.message : 'Network error'}`);

      if (error instanceof Error) {
        return {
          success: false,
          error: error.name === 'AbortError' ? 'Request timeout' : error.message,
        };
      }
      return {
        success: false,
        error: 'Network error',
      };
    }
  }

  // AUTH - Ajustado a tus rutas
  async login(credentials: LoginRequest): Promise<ApiResponse<LoginResponse>> {
    return this.makeRequest<LoginResponse>('/users/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    }, true); // Skip auth for login
  }

  async register(userData: RegisterRequest): Promise<ApiResponse<LoginResponse>> {
    return this.makeRequest<LoginResponse>('/users', {
      method: 'POST',
      body: JSON.stringify(userData),
    }, true); // Skip auth for registration
  }

  async logout(): Promise<ApiResponse<void>> {
    return this.makeRequest<void>('/users/logout', {
      method: 'POST',
    });
  }

  async getMe(): Promise<ApiResponse<any>> {
    return this.makeRequest('/me');
  }

  // USERS
  async getUsers(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/users');
  }

  async getUser(userId: number): Promise<ApiResponse<any>> {
    return this.makeRequest(`/users/${userId}`);
  }

  async updateUser(userId: number, userData: any): Promise<ApiResponse<any>> {
    return this.makeRequest(`/users/${userId}`, {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  }

  async deleteUser(userId: number): Promise<ApiResponse<void>> {
    return this.makeRequest(`/users/${userId}`, {
      method: 'DELETE',
    });
  }

  // GAMES (requieren auth seg√∫n tus rutas)
  async getGames(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/games');
  }

  async getGame(gameId: number): Promise<ApiResponse<any>> {
    return this.makeRequest(`/games/${gameId}`);
  }

  async createGame(gameData: any): Promise<ApiResponse<any>> {
    return this.makeRequest('/games', {
      method: 'POST',
      body: JSON.stringify(gameData),
    });
  }

  async updateGame(gameId: number, gameData: any): Promise<ApiResponse<any>> {
    return this.makeRequest(`/games/${gameId}`, {
      method: 'PUT',
      body: JSON.stringify(gameData),
    });
  }

  // MATCHES
  async createMatch(matchData: { name: string; game_id: number }): Promise<ApiResponse<any>> {
    return this.makeRequest('/game-match', {
      method: 'POST',
      body: JSON.stringify(matchData),
    });
  }

  async getMatch(matchId: number): Promise<ApiResponse<any>> {
    return this.makeRequest(`/game-match/${matchId}`);
  }
}

export const apiService = new ApiService();